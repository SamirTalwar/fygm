#!/usr/bin/env nu

use std

let origin_url = (git config --get remote.origin.url)
std log debug $'remote origin: ($origin_url)'
if ($origin_url | is-empty) {
  abort 'There is nowhere to raise the pull request. Consider hosting this somewhere.'
}

let upstream_url = (git config --get remote.upstream.url)
std log debug $'remote upstream: ($upstream_url)'

let main_branch = (git config --get --default=origin/main branch.main)
std log debug $'main branch: ($main_branch)'

let current_branch = (git symbolic-ref --short HEAD)
std log debug $'current branch: ($current_branch)'

let custom_branch_prefix = (git config --get $'branch.($current_branch).prefix')
let default_branch_prefix = (git config --get branch.prefix)
let branch_prefix = if ($custom_branch_prefix | is-empty) { $default_branch_prefix } else { $custom_branch_prefix }
std log debug $'branch prefix: ($branch_prefix)'

if ($current_branch | is-empty) {
  abort 'You are not on a branch.'
}

if $current_branch == $main_branch and ($upstream_url | is-empty) {
  abort $'Do not work on the "($main_branch)" branch.'
}

if not ($current_branch | str starts-with $branch_prefix) {
  abort $'The branch name must start with "($branch_prefix)".'
}

let hostname = ($origin_url | sed -r 's#^(\w+://)?([0-9A-Za-z_-]+@)?([^:/]+).*$#\3#')
let repository = ($origin_url | sed -r 's#^(\w+://)?([0-9A-Za-z_-]+@)?[^:/]+[:/]([0-9A-Za-z_-]+/[0-9A-Za-z_-]+)(\.git)?$#\3#')
let repository_owner = ($repository | sed -r 's#^(.*)/.*$#\1#')
let repository_name = ($repository | sed -r 's#^.*/(.*)$#\1#')
std log debug $'hostname: ($hostname)'
std log debug $'repository: ($repository)'
std log debug $'repository owner: ($repository_owner)'
std log debug $'repository name: ($repository_name)'

let pull_request_url_record = (do {
  if $hostname =~ 'github' {
    if ($upstream_url | is-empty) {
      {
        scheme: 'https'
        host: $hostname
        path: ([$repository_owner $repository_name 'compare' $current_branch] | url build-path)
        query: ({expand: 1} | url build-query)
      }
    } else {
      let upstream_repository = ($upstream_url | sed -r 's#^(\w+://)?([0-9A-Za-z_-]+@)?[^:/]+[:/]([0-9A-Za-z_-]+/[0-9A-Za-z_-]+)(\.git)?$#\3#')
      let upstream_repository_owner = ($upstream_repository | sed -r 's#^(.*)/.*$#\1#')
      let upstream_repository_name = ($upstream_repository | sed -r 's#^.*/(.*)$#\1#')
      let stripped_branch = ($main_branch | sed -r 's#^origin/(.*)$#\1#')
      let target = $'($stripped_branch)...($repository_owner):($current_branch)'
      {
        scheme: 'https'
        host: $hostname
        path: ([$upstream_repository_owner $upstream_repository_name 'compare' $target] | url build-path)
        query: ({expand: 1} | url build-query)
      }
    }
  } else if $hostname =~ 'gitlab' {
    let stripped_branch = ($main_branch | sed -r 's#^origin/(.*)$#\1#')
    {
      scheme: 'https'
      host: $hostname
      path: ([$repository_owner $repository_name 'merge_requests' 'new'] | url build-path)
      query: ({
        'merge_request[source_branch]': $current_branch
        'merge_request[target_branch]': $stripped_branch
      } | url build-query)
    }
  } else {
    abort $'I do not know how make a pull request to "($hostname)".'
  }
})
let pull_request_url = ($pull_request_url_record | url join)
std log debug $'pull request URL: ($pull_request_url)'

git push -u origin $current_branch
start $pull_request_url

def "url build-path" [] {
  $in | each { |x| $x | url encode } | str join '/'
}

def successful [] {
  $in | complete | $in.exit_code == 0
}

def abort [message] {
  std log critical $message
  exit 1
}
