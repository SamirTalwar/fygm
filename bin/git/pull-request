#!/usr/bin/env nix-shell
#!nix-shell -i runhaskell -p git ghc.withPackages(ps:\ with\ ps;\ [attoparsec\ process\ text])

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TupleSections #-}

import Control.Applicative (liftA2, (<|>))
import Control.Monad (unless, when)
import Data.Attoparsec.Text hiding (parse)
import qualified Data.Char as Char
import Data.Functor (($>))
import qualified Data.List as List
import qualified Data.Maybe as Maybe
import Data.Text (Text)
import qualified Data.Text as Text
import qualified Data.Text.IO as Text.IO
import System.Environment (getArgs)
import System.Exit (ExitCode (..), exitFailure)
import System.IO (stderr)
import System.Process (callProcess, proc, readCreateProcess, readCreateProcessWithExitCode)

data Service = GitHub | BitBucket | GitLab
  deriving (Show, Enum)

newtype Hostname = Hostname {unHostname :: Text}
  deriving (Show)

newtype Repository = Repository {unRepository :: Text}
  deriving (Show)

newtype Branch = Branch {unBranch :: Text}
  deriving (Eq, Show)

hosts = [GitHub, BitBucket, GitLab]

main = do
  args <- getArgs

  maybeUrl <- maybeCaptureGit "config" ["--get", "remote.origin.url"]
  url <- case maybeUrl of
    Just url -> return url
    Nothing -> abort "There's nowhere to raise the pull request. Consider hosting this somewhere."

  (service, hostname, repository) <-
    case Maybe.mapMaybe (\service -> (service,) <$> parseUrl url service) hosts of
      [(service, (hostname, repository))] -> return (service, hostname, repository)
      _ -> abort $ "I don't know how to open a pull request for " <> url <> "."

  maybeUpstreamUrl <- maybeCaptureGit "config" ["--get", "remote.upstream.url"]
  let maybeUpstreamRepository = fmap snd . flip parseUrl service =<< maybeUpstreamUrl

  branch <- Branch <$> captureGit "name" []
  mainBranch <- Branch <$> captureGit "main-branch" []
  when (branch == mainBranch && Maybe.isNothing maybeUpstreamRepository) $
    abort $ "Do not work on the \"" <> unBranch mainBranch <> "\" branch."

  git "first-push" args

  let prUrl = pullRequestUrl service hostname maybeUpstreamRepository repository mainBranch branch
  callProcess "open" [Text.unpack prUrl]

abort :: Text -> IO a
abort message = do
  Text.IO.hPutStrLn stderr message
  exitFailure

git :: String -> [String] -> IO ()
git subcommand args =
  callProcess "git" (subcommand : args)

captureGit :: String -> [String] -> IO Text
captureGit subcommand args = do
  Text.strip . Text.pack <$> readCreateProcess (proc "git" (subcommand : args)) ""

maybeCaptureGit :: String -> [String] -> IO (Maybe Text)
maybeCaptureGit subcommand args =
  (Just <$> captureGit subcommand args) <|> pure Nothing

pullRequestUrl :: Service -> Hostname -> Maybe Repository -> Repository -> Branch -> Branch -> Text
pullRequestUrl GitHub (Hostname hostname) maybeUpstreamRepository (Repository repository) (Branch mainBranch) (Branch branch) =
  case maybeUpstreamRepository of
    Nothing ->
      "https://" <> hostname <> "/" <> repository <> "/compare/" <> branch <> "?expand=1"
    Just (Repository upstreamRepository) ->
      let owner = head $ Text.split (== '/') repository
       in "https://" <> hostname <> "/" <> upstreamRepository <> "/compare/" <> mainBranch <> "..." <> owner <> ":" <> branch <> "?expand=1"
pullRequestUrl BitBucket (Hostname hostname) maybeUpstreamRepository repository (Branch mainBranch) (Branch branch) =
  "https://" <> hostname <> "/" <> unRepository (Maybe.fromMaybe repository maybeUpstreamRepository) <> "/pull-request/new?source=" <> unRepository repository <> "%3A%3A" <> branch <> "%3A%3A" <> mainBranch
pullRequestUrl GitLab (Hostname hostname) Nothing (Repository repository) mainBranch (Branch branch) =
  "https://" <> hostname <> "/" <> repository <> "/merge_requests/new?utf8=âœ“&merge_request[source_branch]=" <> branch <> "&merge_request[target_branch]=" <> (unBranch (stripOrigin mainBranch))
pullRequestUrl GitLab _ (Just _) _ _ _ =
  error "I don't know how to open a GitLab merge request against a different upstream repository."

stripOrigin :: Branch -> Branch
stripOrigin b@(Branch branch) =
  Maybe.fromMaybe b (Branch <$> Text.stripPrefix "origin/" branch)

-- Parsing

parse :: Text -> Parser a -> Maybe a
parse text parser = eitherToMaybe $ parseOnly parser text

parseUrl :: Text -> Service -> Maybe (Hostname, Repository)
parseUrl url service = parse url $ do
  h <- sshHost serviceName <|> httpsHost serviceName
  r <- repository
  endOfInput
  return (h, r)
  where
    serviceName =
      case service of
        GitHub -> "github"
        BitBucket -> "bitbucket"
        GitLab -> "gitlab"

sshHost :: Text -> Parser Hostname
sshHost segment = do
  identifier
  char '@'
  verifyHostnameContains segment <* char ':'

httpsHost :: Text -> Parser Hostname
httpsHost segment = do
  string "https://"
  optionally (identifier *> char '@')
  verifyHostnameContains segment <* char '/'

repository :: Parser Repository
repository = do
  owner <- identifier
  slash
  name <- identifier
  optionally (string ".git")
  return $ Repository $ owner <> "/" <> name

identifier :: Parser Text
identifier = takeWhile1 $ Char.isAlphaNum <||> (== '_') <||> (== '-')

verifyHostnameContains :: Text -> Parser Hostname
verifyHostnameContains segment = do
  segments <- identifier `sepBy1` char '.'
  unless (segment `elem` segments) $
    fail $ Text.unpack $ "Hostname does not contain \"" <> segment <> "\"."
  return (Hostname (Text.intercalate "." segments))

slash :: Parser ()
slash = char '/' $> ()

optionally :: Parser a -> Parser ()
optionally p = option () (p $> ())

-- Helpers

eitherToMaybe :: Either l r -> Maybe r
eitherToMaybe (Right r) = Just r
eitherToMaybe (Left _) = Nothing

(<||>) = liftA2 (||)
