#!/usr/bin/env nix-shell
#!nix-shell -i runhaskell -p git ghc.withPackages(ps:\ with\ ps;\ [attoparsec\ process\ text])

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TupleSections #-}

import Control.Applicative (liftA2, (<|>))
import Control.Monad (when)
import Data.Attoparsec.Text hiding (parse)
import qualified Data.Char as Char
import Data.Functor (($>))
import qualified Data.List as List
import qualified Data.Maybe as Maybe
import Data.Text (Text)
import qualified Data.Text as Text
import qualified Data.Text.IO as Text.IO
import System.Environment (getArgs)
import System.Exit (ExitCode (..), exitFailure)
import System.IO (stderr)
import System.Process (callProcess, proc, readCreateProcess, readCreateProcessWithExitCode)

data Host = GitHub | BitBucket
  deriving (Show, Enum)

newtype Repository = Repository {unRepository :: Text}
  deriving (Show)

newtype Branch = Branch {unBranch :: Text}
  deriving (Eq, Show)

hosts = [GitHub, BitBucket]

main = do
  args <- getArgs

  maybeUrl <- maybeCaptureGit "config" ["--get", "remote.origin.url"]
  url <- case maybeUrl of
    Just url -> return url
    Nothing -> abort "There's nowhere to raise the pull request. Consider hosting this somewhere."

  (host, repository) <-
    case Maybe.mapMaybe (\host -> (host,) <$> parseHost url host) hosts of
      [(host, repository)] -> return (host, repository)
      _ -> abort $ "I don't know how to open a pull request for " <> url <> "."

  maybeUpstreamUrl <- maybeCaptureGit "config" ["--get", "remote.upstream.url"]
  let maybeUpstreamRepository = maybeUpstreamUrl >>= flip parseHost host

  branch <- Branch <$> captureGit "name" []
  mainBranch <- Branch <$> captureGit "main-branch" []
  when (branch == mainBranch && Maybe.isNothing maybeUpstreamRepository) $
    abort $ "Do not work on the \"" <> unBranch mainBranch <> "\" branch."

  git "first-push" args

  let prUrl = pullRequestUrl host maybeUpstreamRepository repository mainBranch branch
  callProcess "open" [Text.unpack prUrl]

abort :: Text -> IO a
abort message = do
  Text.IO.hPutStrLn stderr message
  exitFailure

git :: String -> [String] -> IO ()
git subcommand args =
  callProcess "git" (subcommand : args)

captureGit :: String -> [String] -> IO Text
captureGit subcommand args = do
  Text.strip . Text.pack <$> readCreateProcess (proc "git" (subcommand : args)) ""

maybeCaptureGit :: String -> [String] -> IO (Maybe Text)
maybeCaptureGit subcommand args =
  (Just <$> captureGit subcommand args) <|> pure Nothing

pullRequestUrl :: Host -> Maybe Repository -> Repository -> Branch -> Branch -> Text
pullRequestUrl GitHub maybeUpstreamRepository (Repository repository) (Branch mainBranch) (Branch branch) =
  case maybeUpstreamRepository of
    Nothing ->
      "https://github.com/" <> repository <> "/compare/" <> branch <> "?expand=1"
    Just (Repository upstreamRepository) ->
      let owner = head $ Text.split (== '/') repository
       in "https://github.com/" <> upstreamRepository <> "/compare/" <> mainBranch <> "..." <> owner <> ":" <> branch <> "?expand=1"
pullRequestUrl BitBucket maybeUpstreamRepository repository (Branch mainBranch) (Branch branch) =
  "https://bitbucket.org/" <> unRepository (Maybe.fromMaybe repository maybeUpstreamRepository) <> "/pull-request/new?source=" <> unRepository repository <> "%3A%3A" <> branch <> "%3A%3A" <> mainBranch

-- Parsing

parse :: Text -> Parser a -> Maybe a
parse text parser = eitherToMaybe $ parseOnly parser text

parseHost :: Text -> Host -> Maybe Repository
parseHost url GitHub = parse url $ do
  sshHost "github.com" <|> httpsHost "github.com"
  repository <* endOfInput
parseHost url BitBucket = parse url $ do
  sshHost "bitbucket.org" <|> httpsHost "bitbucket.org"
  repository <* endOfInput

sshHost :: Text -> Parser ()
sshHost host = do
  identifier
  char '@'
  string host
  char ':'
  return ()

httpsHost :: Text -> Parser ()
httpsHost host = do
  string "https://"
  optionally (identifier *> char '@')
  string host
  char '/'
  return ()

repository :: Parser Repository
repository = do
  owner <- identifier
  slash
  name <- identifier
  optionally (string ".git")
  return $ Repository $ owner <> "/" <> name

identifier :: Parser Text
identifier = takeWhile1 $ Char.isAlphaNum <||> (== '_') <||> (== '-')

slash :: Parser ()
slash = char '/' $> ()

optionally :: Parser a -> Parser ()
optionally p = option () (p $> ())

-- Helpers

eitherToMaybe :: Either l r -> Maybe r
eitherToMaybe (Right r) = Just r
eitherToMaybe (Left _) = Nothing

(<||>) = liftA2 (||)
