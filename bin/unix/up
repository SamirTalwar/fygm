#!/usr/bin/env zsh

[[ -s "$HOME/.rvm/scripts/rvm" ]] && \
    source "$HOME/.rvm/scripts/rvm"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && \
    export SDKMAN_DIR="$HOME/.sdkman" && \
    source "$HOME/.sdkman/bin/sdkman-init.sh"

set -e

SELF=$(realpath $0)
ROOT=$(realpath $(dirname $SELF)/../..)

ALL_PACKAGE_MANAGERS=(
    brew
    apt
    sdk
    rvm
    gem
    pip
    nvm
    npm
    cabal
    raco
    gcloud
    vim-plug
    nvim-plug
    docker-machine
    docker
)

function exists {
    (( $+commands[$1] )) || command -v $1 >/dev/null
}

function self-update {
    local output exit_code
    output=$(cd $ROOT && git pull-everything 2>&1)
    exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo "$output"
        echo "Updating $ROOT failed with status code $exit_code."
        exit $exit_code
    fi

    if [[ $output != 'Already up-to-date.' ]]; then
        echo "$output"
    else
        return 1
    fi
}

function update-brew {
    if exists brew; then
        brew update
        brew upgrade --all
        brew cleanup
        brew cask cleanup
        brew linkapps
    fi
}

function update-apt {
    if exists apt-get; then
        apt-get update
        apt-get upgrade
    fi
}

function update-sdk {
    if exists sdk; then
        sdk selfupdate
        source "$HOME/.sdkman/bin/sdkman-init.sh"
        sdk outdated | tail +2 | awk '{ print $1 }' | while read candidate; do
            yes | sdk install $candidate
        done
    fi
}

function update-rvm {
    if exists rvm; then
        rvm get head
        rvm cleanup all
        rvm reload
    fi
}

function update-gem {
    if exists gem; then
        if exists rvm; then
            (rvm use ruby@global && update-all-gems)
        fi

        update-all-gems
    fi
}

function update-all-gems {
    gem update --system
    gem update
    gem cleanup
}

function update-pip {
    for pip in pip pip3; do
        echo "Using $pip..."
        if exists $pip; then
            $pip list --outdated | field 1 | gxargs --no-run-if-empty $pip install --upgrade
        fi
    done
}

function update-nvm {
    nvm_version="$(http https://api.github.com/repos/creationix/nvm/tags | jq -r '.[0].name')"
    curl -fsSL "https://raw.githubusercontent.com/creationix/nvm/$nvm_version/install.sh" | bash
}

function update-npm {
    if exists npm; then
        npm update -g
        npm upgrade -g
    fi
}

function update-cabal {
    if exists cabal; then
        cabal update
    fi
}

function update-raco {
    if exists raco; then
        raco pkg update --all --auto
    fi
}

function update-gcloud {
    if exists gcloud; then
        yes | gcloud components update
    fi
}

function update-vim-plug {
    if [[ -e "$HOME/.vim/autoload/plug.vim" ]]; then
        vim +PlugInstall +PlugUpdate +PlugClean! +qall
    fi
}

function update-nvim-plug {
    if [[ -e "$HOME/.config/nvim/autoload/plug.vim" ]]; then
        nvim +PlugInstall +PlugUpdate +PlugClean! +qall
    fi
}

function update-docker-machine {
    if exists docker-machine; then
        docker-machine upgrade
        waituntil --timeout=30 docker ps >/dev/null
    fi
}

function update-docker {
    local image filter
    if exists docker && (! exists docker-machine || [[ -n $DOCKER_MACHINE_NAME && $(docker-machine status $DOCKER_MACHINE_NAME) == 'Running' ]]); then
        docker-cleanup
        if [[ -e ~/.up-docker-filter ]]; then
            filter=$(cat ~/.up-docker-filter)
        fi
        docker images | tail -n+2 | awk '{ print $1 ":" $2 }' | while read image; do
            if [[ -n $filter && $image =~ $filter ]]; then
                echo "Skipping $image."
            elif [[ $image =~ '^([a-z]+\.)?gcr\.io' ]]; then
                gcloud docker pull $image || :
            else
                docker pull $image || :
            fi
        done
        docker-cleanup
    fi
}

if self-update; then
    echo "Updated $ROOT. Restarting..."
    exec $SELF "$@"
fi

if [[ $# -eq 0 ]]; then
    package_managers=($ALL_PACKAGE_MANAGERS)
else
    typeset -a package_managers
    i=0
    for package_manager in $@; do
        i=$((i + 1))
        if [[ ${+ALL_PACKAGE_MANAGERS[(r)$package_manager]} -eq 0 ]]; then
            echo >&2 "Cannot update \"$package_manager\"."
            exit 1
        fi
        package_managers[$i]=$package_manager
    done
fi

for package_manager in $package_managers; do
    echo "Updating $package_manager..."
    echo "Updating $package_manager..." | sed 's/./=/g' # Underline the previous statement.
    update-$package_manager || echo >&2 'Update failed.'
    echo
done
