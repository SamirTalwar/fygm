#!/usr/bin/env zsh

[[ -s "$HOME/.rvm/scripts/rvm" ]] && \
  source "$HOME/.rvm/scripts/rvm"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && \
  export SDKMAN_DIR="$HOME/.sdkman" && \
  source "$HOME/.sdkman/bin/sdkman-init.sh"

set -o err_return
set -o no_unset
set -o pipefail

source ${0:A:h}/../../self-update.sh

ALL_PACKAGE_MANAGERS=(
  softwareupdate
  brew
  apt
  nix
  sdk
  pip
  rvm
  nvm
  yarn
  cabal
  opam
  raco
  rustup
  tpm
  vim-plug
  nvim-plug
  docker
)

function exists {
  (( $+commands[$1] )) || command -v $1 >/dev/null
}

function log {
  echo >&2 '+' $@
}

function run {
  log $@
  $@
}

function update-softwareupdate {
  if exists softwareupdate; then
    run softwareupdate --install --all
  fi
}

function update-brew {
  if exists brew; then
    run brew update
    run brew upgrade
    run brew cleanup
  fi
}

function update-apt {
  if exists apt-get; then
    run sudo apt-get update
    run sudo apt-get dist-upgrade --yes
    run sudo apt-get autoremove --purge --yes
  fi
}

function update-nix {
  if exists nix; then
    run nix-channel --update
    if exists nixos-rebuild; then
      run sudo nixos-rebuild switch
    fi
    if exists home-manager; then
      NIX_PATH="${HOME}/.nix-defexpr/channels${NIX_PATH:+:}${NIX_PATH:-}" run home-manager switch
    else
      run nix-env --upgrade
    fi
  fi
}

function update-sdk {
  if exists sdk; then
    run sdk selfupdate
    source "$HOME/.sdkman/bin/sdkman-init.sh"
    run sdk broadcast # to prevent it from popping up during `sdk outdated`
    log sdk install
    sdk outdated | tail +2 | awk '{ print $1 }' | while read candidate; do
      yes | sdk install $candidate
    done
  fi
}

function update-pip {
  local packages
  if exists pip; then
    packages=($(pip list --user --outdated --format=json | jq -r '.[] | .name'))
    if [[ ${#packages} -gt 0 ]]; then
      log pip install --user --upgrade
      pip install --user --upgrade ${packages[@]}
    fi
  fi
}

function update-rvm {
  if exists rvm; then
    run rvm get head
    run rvm cleanup all
    run rvm reload
  fi
}

function update-nvm {
  local NVM_DIR="$HOME/.nvm"
  if [[ -d "$NVM_DIR" ]]; then
    cd "$NVM_DIR"
    run git fetch --tags origin
    run git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
  fi
}

function update-yarn {
  if exists yarn; then
    run yarn global upgrade
  fi
}

function update-cabal {
  if exists cabal; then
    run cabal update
  fi
}

function update-opam {
  if exists opam && [[ -d ~/.opam ]]; then
    run opam update --yes
    run opam upgrade --yes
  fi
}

function update-raco {
  if exists raco; then
    run raco pkg update --all --auto
  fi
}

function update-rustup {
  if exists rustup; then
    run rustup update
  fi
}

function update-gcloud {
  if exists gcloud; then
    yes | run gcloud components update
  fi
}

function update-tpm {
  if [[ -e "$HOME/.tmux/plugins/tpm" ]]; then
    (cd "$HOME/.tmux/plugins/tpm" && git pull --prune --ff-only)
    "$HOME/.tmux/plugins/tpm/bin/install_plugins"
    "$HOME/.tmux/plugins/tpm/bin/update_plugins" all
    "$HOME/.tmux/plugins/tpm/bin/clean_plugins"
  fi
}

function update-vim-plug {
  if [[ -e "$HOME/.vim/autoload/plug.vim" ]]; then
    run vim +PlugUpgrade +qall
    run vim +PlugInstall +PlugUpdate +PlugClean! +qall
  fi
}

function update-nvim-plug {
  if exists nvim && [[ -e "$HOME/.config/nvim/autoload/plug.vim" ]]; then
    run nvim +PlugUpgrade +qall
    run nvim +PlugInstall +PlugUpdate +PlugClean! +qall
    run nvim +UpdateRemotePlugins +qall
  fi
}

function update-docker {
  local image filter
  if exists docker; then
    # Fail fast if the Docker daemon isn't running.
    if ! docker version >/dev/null; then
      return 1
    fi
    run docker-cleanup
    if [[ -e ~/.up-docker-filter ]]; then
      filter=$(cat ~/.up-docker-filter)
    fi
    docker images | tail -n+2 | awk '{ print $1 ":" $2 }' | while read image; do
      if [[ -n $filter && $image =~ $filter ]]; then
        echo "Skipping $image."
      else
        run docker pull $image || :
      fi
    done
    run docker-cleanup
  fi
}

typeset -a package_managers
if [[ $# -eq 0 ]]; then
  package_managers=($ALL_PACKAGE_MANAGERS)
elif [[ $1 == '--except' ]]; then
  package_managers=($ALL_PACKAGE_MANAGERS)
  for package_manager in $@; do
    package_managers[$package_managers[(i)$package_manager]]=()
  done
else
  i=0
  for package_manager in $@; do
    i=$((i + 1))
    if [[ ${+ALL_PACKAGE_MANAGERS[(r)$package_manager]} -eq 0 ]]; then
      echo >&2 "Cannot update \"$package_manager\"."
      exit 1
    fi
    package_managers[$i]=$package_manager
  done
fi

for package_manager in $package_managers; do
  echo "Updating $package_manager..."
  echo "Updating $package_manager..." | sed 's/./=/g' # Underline the previous statement.
  update-$package_manager || echo >&2 'Update failed.'
  echo
done
