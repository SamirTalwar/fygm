#!/usr/bin/env zsh

set -o err_return
set -o no_unset
set -o pipefail

source ${0:A:h}/../../self-update.sh

ALL_PACKAGE_MANAGERS=(
  softwareupdate
  brew
  apt
  snap
  nix
  nushell-plugins
  tpm
  docker
)

function exists {
  (( $+commands[$1] )) || command -v $1 >/dev/null
}

function log {
  echo >&2 '+' $@
}

function run {
  log $@
  $@
}

function update-softwareupdate {
  if exists softwareupdate; then
    run softwareupdate --install --all
  fi
}

function update-brew {
  if exists brew; then
    run brew update
    run brew upgrade
    run brew cleanup
  fi
}

function update-apt {
  if ! $SKIP_ROOT && exists apt-get; then
    run sudo apt-get update
    run sudo apt-get dist-upgrade --yes
    run sudo apt-get autoremove --purge --yes
  fi
}

function update-snap {
  if ! $SKIP_ROOT && exists snap; then
    run sudo snap refresh
    snap list --all \
      | awk '$6 ~ /disabled/ { print $1, $3 }' \
      | while read name revision; do
          run sudo snap remove "$name" --revision="$revision"
        done
  fi
}

function update-nix {
  if exists nix; then
    if ! $SKIP_ROOT && exists nixos-rebuild; then
      run sudo nix-channel --update
      run sudo nixos-rebuild switch
    fi
    run nix-channel --update
    run nix registry pin nixpkgs
    if exists home-manager; then
      NIX_PATH="${HOME}/.nix-defexpr/channels${NIX_PATH:+:}${NIX_PATH:-}" \
        run home-manager switch
    else
      run nix-env --upgrade
    fi
  fi
}

function update-nushell-plugins {
  mkdir -p "${HOME}/.cache/nushell"
  starship init nu > "${HOME}/.cache/nushell/starship.nu"
  echo 'Updated starship.'
  zoxide init nushell > "${HOME}/.cache/nushell/zoxide.nu"
  echo 'Updated zoxide.'
}

function update-tpm {
  if [[ -e "${HOME}/.tmux/plugins/tpm" ]]; then
    (cd "${HOME}/.tmux/plugins/tpm" && git pull --prune --ff-only)
    "${HOME}/.tmux/plugins/tpm/bin/install_plugins"
    "${HOME}/.tmux/plugins/tpm/bin/update_plugins" all
    "${HOME}/.tmux/plugins/tpm/bin/clean_plugins"
  fi
}

function update-docker {
  local image filter
  if exists docker; then
    # Fail fast if the Docker daemon isn't running.
    if ! docker version >/dev/null; then
      return 1
    fi
    run docker system prune --force
    run docker-cleanup
    if [[ -e ~/.up-docker-filter ]]; then
      filter=$(cat ~/.up-docker-filter)
    fi
    docker images | tail -n+2 | awk '{ print $1 ":" $2 }' | while read image; do
      if [[ -n $filter && $image =~ $filter ]]; then
        echo "Skipping $image."
      else
        run docker pull $image || :
      fi
    done
    run docker system prune --force
    run docker-cleanup
  fi
}

SKIP_ROOT=false
if [[ ${1:-} == '--skip-root' ]]; then
  SKIP_ROOT=true
  shift
fi

typeset -a package_managers
if [[ $# -eq 0 ]]; then
  package_managers=($ALL_PACKAGE_MANAGERS)
elif [[ $1 == '--except' ]]; then
  package_managers=($ALL_PACKAGE_MANAGERS)
  for package_manager in $@; do
    package_managers[$package_managers[(i)$package_manager]]=()
  done
else
  i=0
  for package_manager in $@; do
    i=$((i + 1))
    if [[ ${+ALL_PACKAGE_MANAGERS[(r)$package_manager]} -eq 0 ]]; then
      echo >&2 "Cannot update \"$package_manager\"."
      exit 1
    fi
    package_managers[$i]=$package_manager
  done
fi

for package_manager in $package_managers; do
  echo "Updating $package_manager..."
  echo "Updating $package_manager..." | sed 's/./=/g' # Underline the previous statement.
  update-$package_manager || echo >&2 'Update failed.'
  echo
done
