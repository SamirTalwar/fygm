#!/usr/bin/env zsh

[[ -s "$HOME/.rvm/scripts/rvm" ]] && \
  source "$HOME/.rvm/scripts/rvm"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && \
  export SDKMAN_DIR="$HOME/.sdkman" && \
  source "$HOME/.sdkman/bin/sdkman-init.sh"
[[ -f "$HOME/.zplug" ]] && \
  source "$HOME/.zplug"

set -e

SELF=$(realpath $0)
ROOT=$(realpath $(dirname $SELF)/../..)

ALL_PACKAGE_MANAGERS=(
  nix
  brew
  apt
  sdk
  rvm
  # gem
  pip2
  pip3
  nvm
  yarn
  # npm
  cabal
  opam
  raco
  rustup
  gcloud
  tpm
  zplug
  vim-plug
  nvim
  nvim-plug
  docker-machine
  docker
)

function exists {
  (( $+commands[$1] )) || command -v $1 >/dev/null
}

function self-update {
  local output exit_code
  output=$(cd $ROOT && git pull --ff-only 2>&1)
  exit_code=$?
  if [[ $exit_code -ne 0 ]]; then
    echo "$output"
    echo "Updating $ROOT failed with status code $exit_code."
    exit $exit_code
  fi

  if ! [[ $output =~ '^Already up[ -]to[ -]date.$' ]]; then
    echo "$output"
  else
    return 1
  fi
}

function update-nix {
  if exists nix-env; then
    nix-channel --update
    nix-env --upgrade
    nix-collect-garbage --delete-old
  fi
}

function update-brew {
  if exists brew; then
    brew update
    brew upgrade
    brew cask upgrade
    brew cleanup
    brew cask cleanup
  fi
}

function update-apt {
  if exists apt-get; then
    sudo apt-get update
    sudo apt-get upgrade -y
  fi
}

function update-sdk {
  if exists sdk; then
    sdk selfupdate
    source "$HOME/.sdkman/bin/sdkman-init.sh"
    sdk broadcast # to prevent it from popping up during `sdk outdated`
    sdk outdated | tail +2 | awk '{ print $1 }' | while read candidate; do
      yes | sdk install $candidate
    done
  fi
}

function update-rvm {
  if exists rvm; then
    rvm get head
    rvm cleanup all
    rvm reload
  fi
}

function update-gem {
  if exists gem; then
    if exists rvm; then
      (rvm use ruby@global && update-all-gems)
    fi

    update-all-gems
  fi
}

function update-all-gems {
  gem update --system
  gem update
  gem cleanup
}

function update-pip2 {
  update-pip-version 2
}

function update-pip3 {
  update-pip-version 3
}

function update-pip-version {
  local pip packages
  pip="pip$1"
  if exists $pip; then
    packages=($($pip list --outdated --format=json | jq -r '.[] | .name'))
    if [[ ${#packages} -gt 0 ]]; then
      $pip install --upgrade ${packages[@]}
    fi
  fi
}

function update-nvm {
  if exists nvm; then
    nvm_version="$(http https://api.github.com/repos/creationix/nvm/tags | jq -r '.[0].name')"
    curl -fsSL "https://raw.githubusercontent.com/creationix/nvm/$nvm_version/install.sh" | bash
  fi
}

function update-yarn {
  if exists yarn; then
    yarn global upgrade
  fi
}

function update-npm {
  if exists npm; then
    npm update -g
    npm upgrade -g
  fi
}

function update-cabal {
  if exists cabal; then
    cabal update
  fi
}

function update-opam {
  if exists opam && [[ -d ~/.opam ]]; then
    opam update --yes
    opam upgrade --yes
  fi
}

function update-raco {
  if exists raco; then
    raco pkg update --all --auto
  fi
}

function update-rustup {
  if exists rustup; then
    rustup update
  fi
}

function update-gcloud {
  if exists gcloud; then
    yes | gcloud components update
  fi
}

function update-tpm {
  if [[ -e "$HOME/.tmux/plugins/tpm" ]]; then
    (cd "$HOME/.tmux/plugins/tpm" && git pull --prune --ff-only)
    "$HOME/.tmux/plugins/tpm/bin/install_plugins"
    "$HOME/.tmux/plugins/tpm/bin/update_plugins" all
    "$HOME/.tmux/plugins/tpm/bin/clean_plugins"
  fi
}

function update-zplug {
  if exists zplug; then
    zplug install
    zplug update
    zplug clean --force
  fi
}

function update-vim-plug {
  if [[ -e "$HOME/.vim/autoload/plug.vim" ]]; then
    \vim +PlugUpgrade +qall
    \vim +PlugInstall +PlugUpdate +PlugClean! +qall
  fi
}

function update-nvim {
  if exists nvim; then
    pip2 install --upgrade neovim
    pip3 install --upgrade neovim
    gem install neovim
  fi
}

function update-nvim-plug {
  if exists nvim && [[ -e "$HOME/.config/nvim/autoload/plug.vim" ]]; then
    nvim +PlugUpgrade +qall
    nvim +PlugInstall +PlugUpdate +PlugClean! +qall
    nvim +UpdateRemotePlugins +qall
  fi
}

function update-docker-machine {
  if exists docker-machine && [[ -n $DOCKER_MACHINE_NAME ]]; then
    docker-machine upgrade $DOCKER_MACHINE_NAME
    waituntil --timeout=30 docker ps >/dev/null
  fi
}

function update-docker {
  local image filter
  if exists docker && (! exists docker-machine || [[ -z $DOCKER_MACHINE_NAME ]] || $(docker-machine status $DOCKER_MACHINE_NAME) == 'Running' ]]); then
    docker-cleanup
    if [[ -e ~/.up-docker-filter ]]; then
      filter=$(cat ~/.up-docker-filter)
    fi
    docker images | tail -n+2 | awk '{ print $1 ":" $2 }' | while read image; do
      if [[ -n $filter && $image =~ $filter ]]; then
        echo "Skipping $image."
      elif [[ $image =~ '^([a-z]+\.)?gcr\.io' ]]; then
        gcloud docker -- pull $image || :
      else
        docker pull $image || :
      fi
    done
    docker-cleanup
  fi
}

if self-update; then
  echo "Updated $ROOT. Restarting..."
  exec $SELF "$@"
fi

typeset -a package_managers
if [[ $# -eq 0 ]]; then
  package_managers=($ALL_PACKAGE_MANAGERS)
elif [[ $1 == '--except' ]]; then
  package_managers=($ALL_PACKAGE_MANAGERS)
  for package_manager in $@; do
    package_managers[$package_managers[(i)$package_manager]]=()
  done
else
  i=0
  for package_manager in $@; do
    i=$((i + 1))
    if [[ ${+ALL_PACKAGE_MANAGERS[(r)$package_manager]} -eq 0 ]]; then
      echo >&2 "Cannot update \"$package_manager\"."
      exit 1
    fi
    package_managers[$i]=$package_manager
  done
fi

for package_manager in $package_managers; do
  echo "Updating $package_manager..."
  echo "Updating $package_manager..." | sed 's/./=/g' # Underline the previous statement.
  update-$package_manager || echo >&2 'Update failed.'
  echo
done
