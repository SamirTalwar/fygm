set nocompatible " Disable vi support
set nobackup " Disable the backup file (ends in '~')

let mapleader=',' " The <Leader> in map operations is the ','
let maplocalleader=';' " The <LocalLeader> in map operations is the ';'

set encoding=utf-8 " Assume UTF-8

set colorcolumn=81,121 " Show the margin
set number " Show line numbers
set showcmd " Show the command at the bottom
set laststatus=2 " Always show the status bar at the bottom

set expandtab " Spaces, not tabs
set smartindent " Indent or dedent automatically when opening and closing blocks
set shiftwidth=2 " Indent and dedent
set tabstop=2 " Number of spaces that a <Tab> counts for
set softtabstop=2 " The distance travelled by the Tab key after characters

set linebreak " Wrap at a word boundary (doesn't work in list mode)

set ignorecase " Ignore case when searching
set smartcase " Search case-insensitively until a capital letter is typed
set hlsearch " Highlight search results in the document

set cursorline
set scrolloff=5
set mouse=a " Let the user use the mouse

command W w " Bind ':W' to ':w'
command Q q " Bind ':Q' to ':q'
command Wq wq " Bind ':Wq' to ':wq'
command WQ wq " Bind ':WQ' to ':wq'
" Move up and down according to the printed lines, including wrapping, not physical lines
nnoremap j gj
nnoremap k gk
set pastetoggle=<F2> " F2 toggles paste mode

" Set up plugins
call plug#begin()

" Colors
Plug 'altercation/solarized', {'rtp': '/vim-colors-solarized'}

" Extra functionality in the status bar
Plug 'bling/vim-airline'
" Search files using Ctrl+P
Plug 'kien/ctrlp.vim'
" Search everything with :Ack
Plug 'mileszs/ack.vim'
" File/directory management
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
" EditorConfig support
Plug 'editorconfig/editorconfig-vim'
" Connect up tmux
Plug 'christoomey/vim-tmux-navigator'
" Interactive command execution
Plug 'Shougo/vimproc.vim', {'do': ':VimProcInstall'}

" Better repeat support with '.'
Plug 'tpope/vim-repeat'
" Insert, delete and change surrounding elements ('(', '[', '<', etc.)
Plug 'tpope/vim-surround'
" Comment with '\'
Plug 'tpope/vim-commentary'
" Move about with ','
Plug 'Lokaltog/vim-easymotion'
" Precision editing for S-expressions
Plug 'guns/vim-sexp'
" JavaScript autocompletion
Plug 'ternjs/tern_for_vim', {'do': 'npm install'}
" Tab completion
Plug 'ervandew/supertab'

Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-cucumber'
Plug 'ensime/ensime-vim'
Plug 'derekwyatt/vim-scala'
Plug 'guns/vim-clojure-static'
Plug 'venantius/vim-cljfmt'
Plug 'fsharp/vim-fsharp'
Plug 'elixir-lang/vim-elixir'
Plug 'fatih/vim-go'
Plug 'eagletmt/ghcmod-vim'
Plug 'rust-lang/rust.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'flowtype/vim-flow'
Plug 'elmcast/elm-vim'
Plug 'tpope/vim-haml'
Plug 'digitaltoad/vim-pug'
Plug 'slim-template/vim-slim'
Plug 'lunaru/vim-less'
Plug 'tpope/vim-liquid'
Plug 'ekalinin/Dockerfile.vim'
Plug 'rodjek/vim-puppet'
Plug 'hashivim/vim-hashicorp-tools'

" Colour parentheses according to depth
Plug 'kien/rainbow_parentheses.vim'

" Git support
Plug 'tpope/vim-fugitive'
" Lint
Plug 'w0rp/ale'
" Auto-format
Plug 'sbdchd/neoformat'
" Search across the JVM classpath
Plug 'tpope/vim-classpath'
" Clojure REPL
Plug 'tpope/vim-fireplace'

" Edit encrypted files
Plug 'jamessan/vim-gnupg'

call plug#end()

syntax enable

" Make things pretty with Solarized
let s:ignored = system("! grep -q 'Microsoft' /proc/version")
if v:shell_error == 0
  set background=dark
  colorscheme solarized
endif

" In Neovim, <C-h> generates a backspace. We want it to do the right thing.
nmap <BS> <C-h>

" Yank, without jank.
vnoremap <expr>y "my\"" . v:register . "y`y"

" Search for two characters with the ' key.
nmap ' <Plug>(easymotion-s2)
vmap ' <Plug>(easymotion-s2)

let g:neoformat_basic_format_trim = 1
let g:neoformat_enabled_html = []
let g:clj_fmt_autosave = 1
let g:terraform_fmt_on_save = 1
augroup format
  autocmd BufWritePre * silent! Neoformat
augroup END

" Show tabs, trailing spaces and lines that extend past the right of the screen
" Disable for text and Markdown files
set list!
set listchars=tab:\ \ ,trail:·,extends:>
autocmd FileType text setlocal nolist
autocmd FileType markdown setlocal nolist colorcolumn=0

" Spellcheck text and markdown files
set spelllang=en_gb
autocmd FileType text setlocal spell
autocmd FileType markdown setlocal spell

" Show/hide NERDTree with <§>, and find the current file with <±>
map § :NERDTreeToggle<CR>
map ± :NERDTreeFind<CR>

" Show hidden files in NERDTree.
let NERDTreeShowHidden=1

if executable('ag')
  " Use ag for :grep and :Ack.
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ackprg = 'ag --vimgrep'

  " Disable automatic jumping.
  cnoreabbrev Ack Ack!

  " Alias :Ag as :Ack!
  command -nargs=* Ag Ack! <args>

  " Use ag in CtrlP for listing files.
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0 " ag is fast enough that CtrlP doesn't need to cache.
endif

" Set the font
if has("mac")
  try
    set guifont=Source\ Code\ Pro\ Light:h14
  catch
    set guifont=Menlo:h14
  endtry
elseif has("unix")
  try
    set guifont=Source\ Code\ Pro\ Light:h14
  catch
    try
      set guifont=Inconsolata\ 12
    catch
    endtry
  endtry
elseif has("win32")
  set guifont=Consolas:h12
endif

autocmd BufLeave,FocusLost * nested silent! update " Autosave the file when losing focus or leaving the buffer.
let g:tmux_navigator_save_on_switch = 1

let g:SuperTabDefaultCompletionType = "context"

let g:vim_markdown_folding_disabled = 1
let g:javascript_plugin_flow = 1
let g:jsx_ext_required = 0
let g:flow#enable = 1
let g:flow#autoclose = 1
let g:elm_setup_keybindings = 0

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

let g:neomake_open_list = 2

autocmd BufNewFile,BufRead Guardfile,*.Guardfile set filetype=ruby
autocmd BufNewFile,BufRead *.ru set filetype=ruby
autocmd BufNewFile,BufRead *.gradle set filetype=groovy
autocmd BufNewFile,BufRead *.stylus set filetype=sass
autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4

autocmd VimEnter *.clj RainbowParenthesesToggle
autocmd Syntax *.clj RainbowParenthesesLoadRound
autocmd Syntax *.clj RainbowParenthesesLoadSquare
autocmd Syntax *.clj RainbowParenthesesLoadBraces

function! ClearHighlights()
  if &ft == 'haskell'
    GhcModTypeClear
  endif
endfunction

" Set up shortcuts for running the build and tests.
" This depends on the user running the `watch-it` script in another window.
function! WriteToWatchFile(commands)
  let file = substitute(system("tmux display-message -p '/tmp/watching-it-#{session_id}-#{window_index}'"), '[[:cntrl:]]', '', 'g')
  update
  call writefile(['set -e'] + a:commands, file)
endfunction

function! Build()
  if exists('g:build_commands')
    let commands = g:build_commands
  elseif file_readable('Makefile')
    let commands = ['make']
  endif
  if exists('commands')
    call WriteToWatchFile(commands)
  else
    echoerr("I don't know how to build this repository.")
  endif
endfunction

function! RunTest()
  if exists('g:test_commands')
    let commands = g:test_commands
  elseif file_readable('Makefile')
    let commands = ['if [[ $(set +e; make -q check >& /dev/null; echo $?) -ne 2 ]]', 'then', 'make check', 'else', 'make test', 'fi']
  elseif file_readable('stack.yaml')
    let commands = ['stack test']
  elseif file_readable('Setup.hs')
    let commands = ['cabal build', 'cabal test']
  elseif file_readable('Rakefile')
    let commands = ['rake']
  elseif file_readable('Gemfile')
    let commands = ['rspec --color']
  elseif file_readable('package.json')
    let commands = ['npm test']
  endif
  if exists('commands')
    call WriteToWatchFile(commands)
  else
    echoerr("I don't know how to run the tests for this repository.")
  endif
endfunction

noremap <Leader>x :lclose<CR>:cclose<CR>
noremap <Leader>z :windo update<CR>:tabclose<CR>
noremap <leader>c :nohlsearch<CR>:call ClearHighlights()<CR>
noremap <Leader>b :call Build()<CR>
noremap <Leader>t :call RunTest()<CR>
noremap <Leader>p :GhcModType<CR>
noremap <Leader>e :update<CR>:Neomake<CR>

let g:GPGPreferSymmetric=1 " Use symmetric GPG encryption with new files

if getcwd() != $HOME && filereadable('.vimrc')
  let output = system('egrep ' . shellescape('^' . getcwd() . '$') . ' ~/.vimautosource')
  if ! v:shell_error
    execute 'source' (getcwd() . '/' . '.vimrc')
  endif
endif
