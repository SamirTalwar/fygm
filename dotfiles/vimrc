set nocompatible " Disable vi support
set nobackup " Disable the backup file (ends in '~')

" Seems to fix a bunch of problems with filetype plugins
filetype on
filetype off

set encoding=utf-8 " Assume UTF-8

set number " Show line numbers
set colorcolumn=121 " Show the margin
set ruler " Show the cursor position
set showcmd " Show the command at the bottom
set laststatus=2 " Always show the status bar at the bottom

set backspace=indent,eol,start " Allow backspace/delete past the beginning or end of the line

set smarttab " 'Shift' when at the beginning of the line; 'tab' otherwise
set expandtab " Spaces, not tabs
set autoindent " Indent according to the previous line
set smartindent " Indent or dedent automatically when opening and closing blocks
set shiftwidth=4 " Indent and dedent
set tabstop=4 " The distance travelled by the Tab key after characters

set linebreak " Wrap at a word boundary (doesn't work in list mode)

set incsearch " Search as you type
set ignorecase " Ignore case when searching
set smartcase " Search case-insensitively until a capital letter is typed
set hlsearch " Highlight search results in the document
" Type ',c' to clear search results
nnoremap ,c :let @/=""<CR>

set mouse=a " Let the user use the mouse

command W w " Bind ':W' to ':w'
command Q q " Bind ':Q' to ':q'
command Wq wq " Bind ':Wq' to ':wq'
command WQ wq " Bind ':WQ' to ':wq'
" Move up and down according to the printed lines, including wrapping, not physical lines
nnoremap j gj
nnoremap k gk
let mapleader=',' " The <Leader> in map operations is the ','
let maplocalleader=';' " The <LocalLeader> in map operations is the ';'
set pastetoggle=<F2> " F2 toggles paste mode

" Set up Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

Plugin 'altercation/vim-colors-solarized'

" Extra functionality in the status bar
Plugin 'bling/vim-airline'
" Search files using Ctrl+P
Plugin 'kien/ctrlp.vim'
" Search everything with :Ag
Plugin 'rking/ag.vim'
" File/directory management
Plugin 'scrooloose/nerdtree'
" EditorConfig support
Plugin 'editorconfig/editorconfig-vim'
" Connect up tmux
Plugin 'christoomey/vim-tmux-navigator'

" Better repeat support with '.'
Plugin 'tpope/vim-repeat'
" Insert, delete and change surrounding elements ('(', '[', '<', etc.)
Plugin 'tpope/vim-surround'
" Comment with '\'
Plugin 'tpope/vim-commentary'
" Move about with ','
Plugin 'Lokaltog/vim-easymotion'
" Precision editing for S-expressions
Plugin 'guns/vim-sexp'
" Autocompletion
Plugin 'Valloric/YouCompleteMe'

Plugin 'plasticboy/vim-markdown'
Plugin 'derekwyatt/vim-scala'
Plugin 'guns/vim-clojure-static'
Plugin 'DrTom/fsharp-vim'
Plugin 'dag/vim2hs'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'bitc/vim-hdevtools'
Plugin 'pangloss/vim-javascript'
Plugin 'kchmck/vim-coffee-script'
Plugin 'jwhitley/vim-literate-coffeescript'
Plugin 'noc7c9/vim-iced-coffee-script'
Plugin 'tpope/vim-haml'
Plugin 'digitaltoad/vim-jade'
Plugin 'slim-template/vim-slim'
Plugin 'lunaru/vim-less'
Plugin 'tpope/vim-liquid'
Plugin 'mxw/vim-jsx'
Plugin 'gkz/vim-ls'
Plugin 'lambdatoast/elm.vim'
Plugin 'docker/docker', {'rtp': '/contrib/syntax/vim/'}

" Colour parentheses according to depth
Plugin 'kien/rainbow_parentheses.vim'
" Colour text denoting a CSS colour as itself
Plugin 'ap/vim-css-color'

" Git support
Plugin 'tpope/vim-fugitive'
" Interactive command execution
Plugin 'Shougo/vimproc.vim'
" Highlight errors
Plugin 'scrooloose/syntastic'
" Search across the JVM classpath
Plugin 'tpope/vim-classpath'
" Clojure REPL
Plugin 'tpope/vim-fireplace'

" Edit encrypted files
Plugin 'jamessan/vim-gnupg'

call vundle#end()

" Map Ctrl+{h,j,k,l} to the equivalent Alt+{} because Alt doesn't work in Mac terminals.
nmap <C-h> <M-h>
nmap <C-j> <M-j>
nmap <C-k> <M-k>
nmap <C-l> <M-l>
nmap <C-S-h> <M-S-h>
nmap <C-S-j> <M-S-j>
nmap <C-S-k> <M-S-k>
nmap <C-S-l> <M-S-l>

" Search for two characters with the ' key.
nmap ' <Plug>(easymotion-s2)
vmap ' <Plug>(easymotion-s2)

autocmd BufWritePre * :%s/\s\+$//e " Delete trailing spaces

" Show tabs, trailing spaces and lines that extend past the right of the screen
" Disable for text and Markdown files
set list!
set listchars=tab:->,trail:·,extends:>
autocmd Filetype text setlocal nolist
autocmd Filetype markdown setlocal nolist colorcolumn=0

" Show/hide NERDTree with <Tab>
map § :NERDTreeToggle<CR>
" Refresh the CtrlP cache with <F5>
map <F5> :CtrlPClearCache<CR>

set wildignore+=*.class,build,target " Ignore Java output
set wildignore+=_site " Ignore Jekyll output
set wildignore+=dist " Ignore Haskell output
set wildignore+=node_modules " Ignore local node.js dependencies

" Set up Solarized Dark
set t_Co=256
let g:solarized_termcolors=16
let g:Powerline_theme='solarized16'
set background=dark
colorscheme solarized

" Set the font
if has("mac")
    try
        set guifont=Source\ Code\ Pro\ Light:h14
    catch
        set guifont=Menlo:h14
    endtry
elseif has("unix")
    try
        set guifont=Source\ Code\ Pro\ Light:h14
    catch
        try
            set guifont=Inconsolata\ 12
        catch
        endtry
    endtry
elseif has("win32")
    set guifont=Consolas:h12
endif

function CheckForErrors()
    SyntasticCheck
    Errors
endfunction

noremap <Leader>e :call CheckForErrors()<CR>

noremap <Leader>l :lclose<CR>

autocmd BufLeave,FocusLost * nested silent! update " Autosave whenever leaving a modified file, for any reason.
let g:tmux_navigator_save_on_switch = 1

let g:vim_markdown_folding_disabled = 1

autocmd BufNewFile,BufRead *.ru set filetype=ruby
autocmd BufNewFile,BufRead *.gradle set filetype=groovy
autocmd BufNewFile,BufRead *.stylus set filetype=sass

autocmd Filetype clojure setlocal sw=2 ts=2 sts=2
autocmd Filetype coffee,coffee.iced-coffee,litcoffee setlocal sw=2 ts=2 sts=2
autocmd Filetype haskell setlocal sw=2 ts=2 sts=2 foldmethod=manual
autocmd Filetype jade setlocal sw=2 ts=2 sts=2
autocmd Filetype ruby setlocal sw=2 ts=2 sts=2
autocmd Filetype scala setlocal sw=2 ts=2 sts=2
autocmd Filetype slim setlocal sw=2 ts=2 sts=2
autocmd Filetype yaml setlocal sw=2 ts=2 sts=2

autocmd VimEnter *.clj RainbowParenthesesToggle
autocmd Syntax *.clj RainbowParenthesesLoadRound
autocmd Syntax *.clj RainbowParenthesesLoadSquare
autocmd Syntax *.clj RainbowParenthesesLoadBraces

" Set up shortcuts for running tests.
" This depends on the user running the `watch-it` script in another window.
function! RunTest()
    if file_readable('Setup.hs')
        let commands = ['cabal build', 'cabal test']
    endif
    if exists('commands')
        write
        call writefile(['set -e'] + commands, '/tmp/watching-it')
    else
        echoerr("I don't know how to run the tests for this repository.")
    endif
endfunction

noremap <Leader>t :call RunTest()<CR>

let g:GPGPreferSymmetric=1 " Use symmetric GPG encryption with new files

filetype plugin indent on " Re-enable filetype detection with plugins and indentation
syntax enable " Enable syntax highlighting
