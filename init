#!/usr/bin/env ruby

require 'pathname'

@dir = Pathname.new(File.dirname(__FILE__)).realpath
@dotfiles = @dir + 'dotfiles'
@home = Pathname.new(ENV['HOME']).realpath

@links = {
  @home + '.ghc/ghci.conf' => @dotfiles + 'ghc/ghci.conf',
  @home + '.gitconfig' => @dotfiles + 'gitconfig',
  @home + '.gitignore' => @dotfiles + 'gitignore',
  @home + '.gnupg/gpg.conf' => @dotfiles + 'gnupg/gpg.conf',
  @home + '.gnupg/gpg-agent.conf' => @dotfiles + 'gnupg/gpg-agent.conf',
  @home + '.i3' => @dotfiles + 'i3',
  @home + '.nvim' => @home + '.vim',
  @home + '.nvimrc' => @dotfiles + 'vimrc',
  @home + '.racketrc' => @dotfiles + 'racketrc',
  @home + '.tmux' => @dotfiles + 'tmux',
  @home + '.tmux.conf' => @dotfiles + 'tmux.conf',
  @home + '.vimrc' => @dotfiles + 'vimrc',
  @home + '.zlogin' => @dotfiles + 'zlogin',
  @home + '.zlogout' => @dotfiles + 'zlogout',
  @home + '.zprezto' => @dotfiles + 'zprezto',
  @home + '.zpreztorc' => @dotfiles + 'zpreztorc',
  @home + '.zprofile' => @dotfiles + 'zprofile',
  @home + '.zshenv' => @dotfiles + 'zshenv',
  @home + '.zshrc' => @dotfiles + 'zshrc',
}

def run command
  unless system command
    $stderr.puts "FAIL: #{command}"
    exit 1
  end
end

def link source, destination
  destination.dirname.mkpath()
  destination.unlink() if destination.symlink?
  File.symlink source, destination
end

puts 'Symlinking configuration files'
@links.each do |destination, source|
  link source, destination
end

unless (@dir + 'first-time-run').exist?
  puts 'Running first-time setup'
  run (@dir + 'first-time.sh').to_s
  (@dir + 'first-time-run').open 'w' do |f|
    f.write ''
  end
end

puts 'Installing vim plugins'
unless (@home + '.vim/bundle/Vundle.vim').exist?
  run 'git clone git@github.com:VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim'
end

run 'vim +PluginInstall +PluginUpdate +PluginClean! +"silent VimProcInstall" +qall'
run (@home + '.vim/bundle/YouCompleteMe/install.py').to_s
