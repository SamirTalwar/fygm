#!/usr/bin/env zsh

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

set -e

UPDATE_FUNCTIONS=(
    update-brew
    update-apt
    update-rvm
    update-gem
    update-pip
    update-npm
    update-cabal
    update-docker
)

function exists {
    (( $+commands[$1] ))
}

function update-brew {
    if exists brew; then
        brew update
        brew upgrade --all
        brew cleanup
        brew cask cleanup
        brew linkapps
    fi
}

function update-apt {
    if exists apt-get; then
        apt-get update
        apt-get upgrade
    fi
}

function update-rvm {
    if exists rvm; then
        rvm get head
        rvm cleanup all
        rvm reload
    fi
}

function update-gem {
    if exists gem; then
        if exists rvm; then
            (rvm use ruby@global && update-all-gems)
        fi

        update-all-gems
    fi
}

function update-all-gems {
    gem update --system
    gem update
    gem cleanup
}

function update-pip {
    if exists pip; then
        pip install --upgrade setuptools
        pip install --upgrade pip
    fi
}

function update-npm {
    if exists npm; then
        npm update -g
        npm upgrade -g
    fi
}

function update-cabal {
    if exists cabal; then
        cabal update
    fi
}

function update-docker {
    if exists docker && (! exists boot2docker || [[ $(boot2docker status) == 'running' ]]); then
        docker images | tail -n+2 | awk '{ print $1 ":" $2 }' | xargs -n1 docker pull
        docker-cleanup
    fi
}

if [[ $# -eq 0 ]]; then
    UPDATES=($UPDATE_FUNCTIONS)
else
    typeset -a UPDATES
    i=0
    for arg in $@; do
        ARG_FUNCTION=update-$arg
        i=$((i + 1))
        if [[ ${+UPDATE_FUNCTIONS[(r)$ARG_FUNCTION]} -eq 0 ]]; then
            echo >&2 "Cannot update \"$arg\"."
            exit 1
        fi
        UPDATES[$i]=$ARG_FUNCTION
    done
fi

for update in $UPDATES; do
    $update
done
